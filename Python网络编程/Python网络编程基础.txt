python语言进行网络编程的基础只是，主要内容包括网络基础知识，高级网络操作，
web　services,解析hml,e-mail服务，ftp,
使用python操作符数据库,ssl,几种服务器端框架(包括socket服务器，simplexmlRPCserver,cgi和mod_python)
以及多任务处理(包括forking,线程和异步通信)等

学习一种语言，阅读别人的程序是一种非常好的方法

第１部分
底层网络

第１章
客户/服务器网络介绍

不同计算机之间的通信，使用最广泛的是tcp/ip
(Transmission Control Protocol/Internet Protocol)
tcp/ip是标准的协议，它可以使世界范围内的计算机通过Internet或本地的网络通信


两个Internet(Internet protocols)之间的区别：
TCP,UDP

介绍域名系统(Domain Name System(DNS))的操作
DNS可以把文字形式的计算机名字转换成数字地址。

一些底层操作，既可以应用于客户端，也可以应用于服务器


１．１　理解TCP基础

tcp/ip　事实上是一些协议(protocols)的合集。
当前大多数使用中的通信都使用tcp协议

Internet是在一些共享的线路上发送数据的。

可以在本地计算机上同时运行着几个应用程序，如web浏览器，
即时通讯软件和e-mail程序
只需通过一条单一的Modem或DSL线路来连接互联网。
上面所有的程序都共享这个连接。用户不会察觉这个共享的发生


为了实现共享，tcp是通过把你要发送的数据流分解成很多小信息包
在Internet上传输的(也许还伴有其他程序的信息包)，而这些信息包到了
接收这的地方会再次重新合成在一起。
通过分解成小的信息包，Internet连接就会用很少的时间来发送数据
的每一个比特(bit),而其他程序的信息也可以同时被发送

１．１．１　　寻址


为了实现这个信息包计划，TCP必须要考虑一些细节问题，
首先，tcp要能识别远程的及其。
基于tcp/ip的网络，每台机器都有一个唯一的ip地址，
这个ip地址看上去类似192.168.1.1
只要知道了接收者机器的ip地址，信息就可以传送过去

其次，tcp需要知道是与远程及其上运行的哪个程序通信。
究竟是哪个程序应该接收传过来的数据。为了实现这个目的，tcp使用端口号
每个程序使用一个唯一的端口号。这些端口号有时是事先知道的，
有时是随机指定的，所以，每个TCP连接的端点是由一个ip地址和一个
端口号来唯一标识的。

尽管有了ip地址和端口号，tcp就能很好地工作，还有了DNS
当想要和一个远程机器建立连接的时候，可以申请连接该机器ip地址
相对应的DNS,比如www.apresss.com


DNS会提供一个ip地址，接下来就可以建立连接了。

python在程序中经常隐藏DNS层，很多时候不需要知道它的存在

１．１．２　可靠性


Modem有可能改变了数据的几个字节，某个路由器或丢失了一两个信息包‘
系统或许收到了顺序错误的信息包；
一个信息包或许收到了两次；再或许一个主要的网路电缆被切断

tcp是一个可靠的协议，除非整个网络出现了问题，数据将被完好地按
原样正确地传送到另外一端。这个可靠性是通过以下几个规则来实现的


１．为了防止数据在传输的股从横中被损坏，每个信息包都包含一个校验码。
这个校验码就是一个用来保证信息包在传输过程中没有被更改的代码。
当信息包到达目的地的时候，接收方会对比教研和收到的信息中的数据
如果校验码不对，该信息包被省略

２．为了防止信息包丢失，tcp会要求接收方每收到一个信息包
都反馈一下。如果接收方没有提供反馈，发送方会自动重发一次。
由于系统自动处理这个问题，所以程序的开发者根本不用知道
问题的出现。TCP会一直试着发送信息包，一直到接收这收到为止。
或者它会判断网络连接短路，并在程序中返回一个错误提示


３．　为了防止信息包重复或顺序错误，tcp每传送一个信息包都会
传送一个序号。接收方会检查这个序号，确保收到该信息包，并把
全部信息包顺序重新合并。
同时，如果接收方看到了一个已经看多的序号，则该信息包会被丢弃

１．１．３　　路由

为了能使信息包顺利地从本地机器传送到远程服务器上，信息包通常会
经过很多的网络。它们也许先通过本地的DSL到达电话公司，
接着本地城市的一个Internet提供上，
然后到达目的地。

在此期间的每一站，来自其他成千上万计算机的信息包也在一起被传输。
在Internet上负责接收信息包并决定如何把它们传输到目的地设备叫路由器。
可以用一些指令(traceroute,mtr)来查看本地的信息在Internet上传输
时经过了哪些路由器

当路由器断掉时，程序察觉到。当路由器线路拥挤的时候，信息包
有可能丢失，传输的性能也会很差，有时连接又会得到全面的服务，
有时连接速度又会很快

１．１．４　安全

路由器和本地网络的一个重要功能是安全。

因为信息包在Internet上传输的时候，是通过共享的网络传输的，
所以任何有权使用网络的人(只要有台笔记本电脑和一个网卡)
都能看到

这些信息还有可能被插入或改写。

在Internet上传输着一些重要的数据。
还有一个潜在的安全风险是你的连接有可能被拦截而转向另外一台机器。

当前最流行的方法是Secure Sockets Layer(SSL)和Transport　Layer
Security(TLS).
SSL一般是在TCP连接之上的，与程序代码混合在一起，
它提供服务器的认证(所以知道正在和谁通话)
加密(所以其他人都不能看到你的通信)和数据完整型(在没有觉察的情况下，
传输途中的信息包没有人能够修改)

TLS的原理和SSL，类似，只包含在协议堆栈(protocol stack)中

安全性已经越来越重要了，而且认清传统不加密连接的缺点是至关重要的，还应该
明白如何去高效地处理这种情况


１．２　使用客户/服务器模式

tcp/ip对于客户/服务器类型的通信很有帮助。
在客户/服务器结构下，服务器一直在侦听来自客户端的请求，
有请求后，就建立连接来处理它们


例如，当打开一个浏览器并访问www.google.com，浏览器会连接
www.google,com的服务器，并请求访问"/"页：
这个"/"表示该站点的首页。
服务器按顺序找到这一页，并把它传送回你的客户端，接着你的
浏览器就能按照一定的格式显示出来。
一个关键的问题是，客户端总是最开始申请连接的一端，服务器则是
等待客户端连接的一端。

1.2.1 服务器端端口好

为了和一个远程的程序通信，必须知道它的IP地址和端口号。找出IP
地址很简单(只要通过DNS就能得到www.google.com的IP地址)
或许会想要知道怎样才能找到web服务器的端口号

在客户/服务器模式中，服务器通常是侦听一个端口号。
web服务器侦听80端口。web浏览器知道www.google.com端口来获得信息

事实上，在www.iano.org上有一份国际因特网地址分配位于委员会
(Internet Assigned Numbers Authority,IANA)
委会的官方已分配的端口列表。
在linux或unix系统中，还可以在/etc/services下找到这个列表


编写一个服务器，它的服务不在这个列表上，就应该选择一个比1024大
而且你的机器上没有被占用的端口号。
这样可以尽量避免和其他服务冲突。端口号最大可以为65535

在linux或unix系统上，只有系统管理员才能请求访问一个小于1024的端口


１．２．２　客户端端口号


通常，客户端的端口号，一般情况下，客户端会由操作系统随机挑一个端口号

客户端的系统会挑选一个保证没有被使用的
被称为"短命"的端口号，
当服务器收到一个连接请求的时候，请求中带有客户端的端口号，数据会
被传输到该端口上。因此，服务器可以和客户端您挑选的任意端口很好地工作


１．３　理解UDP


UDP，它被用来从一个系统向其他的系统传送非常短的消息。
它只提供一个保证：那就是收到的数据是完整的。
它既不能保证数据是否真的能收到，也不能保证数据是不是只接收一次，
还不能保证收到的信息次序是否和发送时候一致。
但是只要没有受到攻击者绕过安全措施后的攻击，
通过UDP接收的数据通常都会是完整的。


UDP的优点是，因为它不提供上面那些保证，所以要比TCP低级，
tcp建立和关闭连接要花费时间，而UDP对连接没有什么概念，
所以不存在花费时间关闭连接的问题


通常UDP会用在客户端向服务器申请一个比特的信息，如果没有
收到答复会继续申请。用得最广的UDP应用软件是DNS系统。
因为客户端通常只需要发送一个简答的请求，并收到一个同样
简单的回到，UPD非常适合这个任务


UDP还常被用在流式的音频和视频应用软件，
因为UDP只是偶尔丢弃一个信息包，而TCP会过于严格地处理那些被丢弃的
信息博爱，这样音频效果就差很多。
许多游戏和网络文件系统，例如NFS(Need for Speed，极品飞车)
Samba也大量用到了UDP


还有一些选择协议的时候，该用TCP还是UDP的指导方针。
这些方针可能不会涵盖所有的情况，还是


应该用tcp,如果

１．需要一个可靠的数据传输，以确保你的数据完整无缺地到达目的地
２．你的协议需要不止一个请求和服务器的回答
３．你要发送较多的数据
４．　初始连接出现短暂的延迟是可以容忍的


用UDP,如果

１．不太关心信息包是否到达不太在意信息包到达的顺序是否正确，
再或者可以自己察觉这些问题并自己解决

２．你的协议只包括基本请求和回答

３．你需要尽快建立网络会话
４．只传送很少一部分数据。UDP的限制是一个信息包不超过64Kb的数据，
通常人们只用传送1KB一下的数据


１．４　理解物理传输和以太网

tcp/ip有一个优点，就是可以在不同的物理网络硬件之间传送数据。
比较常见的，以太网，端对端(PPP,Peer-Peer Protocol)
拨号连接，令牌环网络，DSL连接，cable modems连接
的网络，人造卫星连接，移动电话以及如T1那样的专线连接


一些


